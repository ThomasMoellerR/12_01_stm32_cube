
cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003240  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080033c8  080033c8  000133c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033e0  080033e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080033e0  080033e0  000133e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033e8  080033e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033e8  080033e8  000133e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033ec  080033ec  000133ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029f8  2000000c  080033fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a04  080033fc  00022a04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7ff  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cca  00000000  00000000  0002c83b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c30  00000000  00000000  0002e508  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b38  00000000  00000000  0002f138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020d01  00000000  00000000  0002fc70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000980f  00000000  00000000  00050971  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c775d  00000000  00000000  0005a180  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001218dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000320c  00000000  00000000  00121958  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080033b0 	.word	0x080033b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080033b0 	.word	0x080033b0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f92b 	bl	800074c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f002 fd5e 	bl	8002fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f943 	bl	80007b6 <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f90b 	bl	8000762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000028 	.word	0x20000028

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028

080005ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c8:	4013      	ands	r3, r2
 80005ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005de:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	60d3      	str	r3, [r2, #12]
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__NVIC_GetPriorityGrouping+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 0307 	and.w	r3, r3, #7
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	2b00      	cmp	r3, #0
 8000620:	db0b      	blt.n	800063a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f003 021f 	and.w	r2, r3, #31
 8000628:	4907      	ldr	r1, [pc, #28]	; (8000648 <__NVIC_EnableIRQ+0x38>)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	095b      	lsrs	r3, r3, #5
 8000630:	2001      	movs	r0, #1
 8000632:	fa00 f202 	lsl.w	r2, r0, r2
 8000636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000e100 	.word	0xe000e100

0800064c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	db0a      	blt.n	8000676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	490c      	ldr	r1, [pc, #48]	; (8000698 <__NVIC_SetPriority+0x4c>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	0112      	lsls	r2, r2, #4
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	440b      	add	r3, r1
 8000670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000674:	e00a      	b.n	800068c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <__NVIC_SetPriority+0x50>)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 030f 	and.w	r3, r3, #15
 8000682:	3b04      	subs	r3, #4
 8000684:	0112      	lsls	r2, r2, #4
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	440b      	add	r3, r1
 800068a:	761a      	strb	r2, [r3, #24]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000e100 	.word	0xe000e100
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b089      	sub	sp, #36	; 0x24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	f1c3 0307 	rsb	r3, r3, #7
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	bf28      	it	cs
 80006be:	2304      	movcs	r3, #4
 80006c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3304      	adds	r3, #4
 80006c6:	2b06      	cmp	r3, #6
 80006c8:	d902      	bls.n	80006d0 <NVIC_EncodePriority+0x30>
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3b03      	subs	r3, #3
 80006ce:	e000      	b.n	80006d2 <NVIC_EncodePriority+0x32>
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	43da      	mvns	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	401a      	ands	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	f04f 31ff 	mov.w	r1, #4294967295
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	43d9      	mvns	r1, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	4313      	orrs	r3, r2
         );
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3724      	adds	r7, #36	; 0x24
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3b01      	subs	r3, #1
 8000714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000718:	d301      	bcc.n	800071e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800071a:	2301      	movs	r3, #1
 800071c:	e00f      	b.n	800073e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <SysTick_Config+0x40>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3b01      	subs	r3, #1
 8000724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000726:	210f      	movs	r1, #15
 8000728:	f04f 30ff 	mov.w	r0, #4294967295
 800072c:	f7ff ff8e 	bl	800064c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <SysTick_Config+0x40>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000736:	4b04      	ldr	r3, [pc, #16]	; (8000748 <SysTick_Config+0x40>)
 8000738:	2207      	movs	r2, #7
 800073a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	e000e010 	.word	0xe000e010

0800074c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ff29 	bl	80005ac <__NVIC_SetPriorityGrouping>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000762:	b580      	push	{r7, lr}
 8000764:	b086      	sub	sp, #24
 8000766:	af00      	add	r7, sp, #0
 8000768:	4603      	mov	r3, r0
 800076a:	60b9      	str	r1, [r7, #8]
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000774:	f7ff ff3e 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 8000778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	6978      	ldr	r0, [r7, #20]
 8000780:	f7ff ff8e 	bl	80006a0 <NVIC_EncodePriority>
 8000784:	4602      	mov	r2, r0
 8000786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078a:	4611      	mov	r1, r2
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff5d 	bl	800064c <__NVIC_SetPriority>
}
 8000792:	bf00      	nop
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff31 	bl	8000610 <__NVIC_EnableIRQ>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ffa2 	bl	8000708 <SysTick_Config>
 80007c4:	4603      	mov	r3, r0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80007dc:	f7ff feda 	bl	8000594 <HAL_GetTick>
 80007e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d101      	bne.n	80007ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80007e8:	2301      	movs	r3, #1
 80007ea:	e099      	b.n	8000920 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2202      	movs	r2, #2
 80007f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f022 0201 	bic.w	r2, r2, #1
 800080a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800080c:	e00f      	b.n	800082e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800080e:	f7ff fec1 	bl	8000594 <HAL_GetTick>
 8000812:	4602      	mov	r2, r0
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	2b05      	cmp	r3, #5
 800081a:	d908      	bls.n	800082e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2220      	movs	r2, #32
 8000820:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2203      	movs	r2, #3
 8000826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800082a:	2303      	movs	r3, #3
 800082c:	e078      	b.n	8000920 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1e8      	bne.n	800080e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	4b38      	ldr	r3, [pc, #224]	; (8000928 <HAL_DMA_Init+0x158>)
 8000848:	4013      	ands	r3, r2
 800084a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800085a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	691b      	ldr	r3, [r3, #16]
 8000860:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6a1b      	ldr	r3, [r3, #32]
 8000878:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800087a:	697a      	ldr	r2, [r7, #20]
 800087c:	4313      	orrs	r3, r2
 800087e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000884:	2b04      	cmp	r3, #4
 8000886:	d107      	bne.n	8000898 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000890:	4313      	orrs	r3, r2
 8000892:	697a      	ldr	r2, [r7, #20]
 8000894:	4313      	orrs	r3, r2
 8000896:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	697a      	ldr	r2, [r7, #20]
 800089e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	f023 0307 	bic.w	r3, r3, #7
 80008ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b4:	697a      	ldr	r2, [r7, #20]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008be:	2b04      	cmp	r3, #4
 80008c0:	d117      	bne.n	80008f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d00e      	beq.n	80008f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f000 fa99 	bl	8000e0c <DMA_CheckFifoParam>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d008      	beq.n	80008f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2240      	movs	r2, #64	; 0x40
 80008e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2201      	movs	r2, #1
 80008ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80008ee:	2301      	movs	r3, #1
 80008f0:	e016      	b.n	8000920 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f000 fa50 	bl	8000da0 <DMA_CalcBaseAndBitshift>
 8000900:	4603      	mov	r3, r0
 8000902:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000908:	223f      	movs	r2, #63	; 0x3f
 800090a:	409a      	lsls	r2, r3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2201      	movs	r2, #1
 800091a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800091e:	2300      	movs	r3, #0
}
 8000920:	4618      	mov	r0, r3
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	f010803f 	.word	0xf010803f

0800092c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
 8000938:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800093a:	2300      	movs	r3, #0
 800093c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800094a:	2b01      	cmp	r3, #1
 800094c:	d101      	bne.n	8000952 <HAL_DMA_Start_IT+0x26>
 800094e:	2302      	movs	r3, #2
 8000950:	e048      	b.n	80009e4 <HAL_DMA_Start_IT+0xb8>
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	2201      	movs	r2, #1
 8000956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b01      	cmp	r3, #1
 8000964:	d137      	bne.n	80009d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	2202      	movs	r2, #2
 800096a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	2200      	movs	r2, #0
 8000972:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f000 f9e2 	bl	8000d44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000984:	223f      	movs	r2, #63	; 0x3f
 8000986:	409a      	lsls	r2, r3
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f042 0216 	orr.w	r2, r2, #22
 800099a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	695a      	ldr	r2, [r3, #20]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009aa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d007      	beq.n	80009c4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f042 0208 	orr.w	r2, r2, #8
 80009c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f042 0201 	orr.w	r2, r2, #1
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	e005      	b.n	80009e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80009de:	2302      	movs	r3, #2
 80009e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80009e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d004      	beq.n	8000a0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e00c      	b.n	8000a24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2205      	movs	r2, #5
 8000a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f022 0201 	bic.w	r2, r2, #1
 8000a20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a3c:	4b92      	ldr	r3, [pc, #584]	; (8000c88 <HAL_DMA_IRQHandler+0x258>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a92      	ldr	r2, [pc, #584]	; (8000c8c <HAL_DMA_IRQHandler+0x25c>)
 8000a42:	fba2 2303 	umull	r2, r3, r2, r3
 8000a46:	0a9b      	lsrs	r3, r3, #10
 8000a48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a5a:	2208      	movs	r2, #8
 8000a5c:	409a      	lsls	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4013      	ands	r3, r2
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d01a      	beq.n	8000a9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d013      	beq.n	8000a9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f022 0204 	bic.w	r2, r2, #4
 8000a82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a88:	2208      	movs	r2, #8
 8000a8a:	409a      	lsls	r2, r3
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a94:	f043 0201 	orr.w	r2, r3, #1
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	409a      	lsls	r2, r3
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d012      	beq.n	8000ad2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d00b      	beq.n	8000ad2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000abe:	2201      	movs	r2, #1
 8000ac0:	409a      	lsls	r2, r3
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aca:	f043 0202 	orr.w	r2, r3, #2
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	409a      	lsls	r2, r3
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4013      	ands	r3, r2
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d012      	beq.n	8000b08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d00b      	beq.n	8000b08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000af4:	2204      	movs	r2, #4
 8000af6:	409a      	lsls	r2, r3
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b00:	f043 0204 	orr.w	r2, r3, #4
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b0c:	2210      	movs	r2, #16
 8000b0e:	409a      	lsls	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4013      	ands	r3, r2
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d043      	beq.n	8000ba0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f003 0308 	and.w	r3, r3, #8
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d03c      	beq.n	8000ba0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b2a:	2210      	movs	r2, #16
 8000b2c:	409a      	lsls	r2, r3
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d018      	beq.n	8000b72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d108      	bne.n	8000b60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d024      	beq.n	8000ba0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	4798      	blx	r3
 8000b5e:	e01f      	b.n	8000ba0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d01b      	beq.n	8000ba0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	4798      	blx	r3
 8000b70:	e016      	b.n	8000ba0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d107      	bne.n	8000b90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f022 0208 	bic.w	r2, r2, #8
 8000b8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d003      	beq.n	8000ba0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ba4:	2220      	movs	r2, #32
 8000ba6:	409a      	lsls	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4013      	ands	r3, r2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f000 808e 	beq.w	8000cce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f003 0310 	and.w	r3, r3, #16
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f000 8086 	beq.w	8000cce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	2220      	movs	r2, #32
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	2b05      	cmp	r3, #5
 8000bd8:	d136      	bne.n	8000c48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f022 0216 	bic.w	r2, r2, #22
 8000be8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	695a      	ldr	r2, [r3, #20]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bf8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d103      	bne.n	8000c0a <HAL_DMA_IRQHandler+0x1da>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d007      	beq.n	8000c1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 0208 	bic.w	r2, r2, #8
 8000c18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c1e:	223f      	movs	r2, #63	; 0x3f
 8000c20:	409a      	lsls	r2, r3
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2201      	movs	r2, #1
 8000c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d07d      	beq.n	8000d3a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	4798      	blx	r3
        }
        return;
 8000c46:	e078      	b.n	8000d3a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d01c      	beq.n	8000c90 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d108      	bne.n	8000c76 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d030      	beq.n	8000cce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	4798      	blx	r3
 8000c74:	e02b      	b.n	8000cce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d027      	beq.n	8000cce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	4798      	blx	r3
 8000c86:	e022      	b.n	8000cce <HAL_DMA_IRQHandler+0x29e>
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d10f      	bne.n	8000cbe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f022 0210 	bic.w	r2, r2, #16
 8000cac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d032      	beq.n	8000d3c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d022      	beq.n	8000d28 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f022 0201 	bic.w	r2, r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d307      	bcc.n	8000d16 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1f2      	bne.n	8000cfa <HAL_DMA_IRQHandler+0x2ca>
 8000d14:	e000      	b.n	8000d18 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000d16:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2201      	movs	r2, #1
 8000d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d005      	beq.n	8000d3c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	4798      	blx	r3
 8000d38:	e000      	b.n	8000d3c <HAL_DMA_IRQHandler+0x30c>
        return;
 8000d3a:	bf00      	nop
    }
  }
}
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop

08000d44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
 8000d50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	2b40      	cmp	r3, #64	; 0x40
 8000d70:	d108      	bne.n	8000d84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000d82:	e007      	b.n	8000d94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	60da      	str	r2, [r3, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	3b10      	subs	r3, #16
 8000db0:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <DMA_CalcBaseAndBitshift+0x64>)
 8000db2:	fba2 2303 	umull	r2, r3, r2, r3
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000dba:	4a13      	ldr	r2, [pc, #76]	; (8000e08 <DMA_CalcBaseAndBitshift+0x68>)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d909      	bls.n	8000de2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000dd6:	f023 0303 	bic.w	r3, r3, #3
 8000dda:	1d1a      	adds	r2, r3, #4
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	659a      	str	r2, [r3, #88]	; 0x58
 8000de0:	e007      	b.n	8000df2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000dea:	f023 0303 	bic.w	r3, r3, #3
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	aaaaaaab 	.word	0xaaaaaaab
 8000e08:	080033c8 	.word	0x080033c8

08000e0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d11f      	bne.n	8000e66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d855      	bhi.n	8000ed8 <DMA_CheckFifoParam+0xcc>
 8000e2c:	a201      	add	r2, pc, #4	; (adr r2, 8000e34 <DMA_CheckFifoParam+0x28>)
 8000e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e32:	bf00      	nop
 8000e34:	08000e45 	.word	0x08000e45
 8000e38:	08000e57 	.word	0x08000e57
 8000e3c:	08000e45 	.word	0x08000e45
 8000e40:	08000ed9 	.word	0x08000ed9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d045      	beq.n	8000edc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e54:	e042      	b.n	8000edc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e5e:	d13f      	bne.n	8000ee0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e64:	e03c      	b.n	8000ee0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e6e:	d121      	bne.n	8000eb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d836      	bhi.n	8000ee4 <DMA_CheckFifoParam+0xd8>
 8000e76:	a201      	add	r2, pc, #4	; (adr r2, 8000e7c <DMA_CheckFifoParam+0x70>)
 8000e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7c:	08000e8d 	.word	0x08000e8d
 8000e80:	08000e93 	.word	0x08000e93
 8000e84:	08000e8d 	.word	0x08000e8d
 8000e88:	08000ea5 	.word	0x08000ea5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8000e90:	e02f      	b.n	8000ef2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d024      	beq.n	8000ee8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000ea2:	e021      	b.n	8000ee8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000eac:	d11e      	bne.n	8000eec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000eb2:	e01b      	b.n	8000eec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d902      	bls.n	8000ec0 <DMA_CheckFifoParam+0xb4>
 8000eba:	2b03      	cmp	r3, #3
 8000ebc:	d003      	beq.n	8000ec6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000ebe:	e018      	b.n	8000ef2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8000ec4:	e015      	b.n	8000ef2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00e      	beq.n	8000ef0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8000ed6:	e00b      	b.n	8000ef0 <DMA_CheckFifoParam+0xe4>
      break;
 8000ed8:	bf00      	nop
 8000eda:	e00a      	b.n	8000ef2 <DMA_CheckFifoParam+0xe6>
      break;
 8000edc:	bf00      	nop
 8000ede:	e008      	b.n	8000ef2 <DMA_CheckFifoParam+0xe6>
      break;
 8000ee0:	bf00      	nop
 8000ee2:	e006      	b.n	8000ef2 <DMA_CheckFifoParam+0xe6>
      break;
 8000ee4:	bf00      	nop
 8000ee6:	e004      	b.n	8000ef2 <DMA_CheckFifoParam+0xe6>
      break;
 8000ee8:	bf00      	nop
 8000eea:	e002      	b.n	8000ef2 <DMA_CheckFifoParam+0xe6>
      break;   
 8000eec:	bf00      	nop
 8000eee:	e000      	b.n	8000ef2 <DMA_CheckFifoParam+0xe6>
      break;
 8000ef0:	bf00      	nop
    }
  } 
  
  return status; 
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	e16b      	b.n	80011f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	f040 815a 	bne.w	80011ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x4a>
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b12      	cmp	r3, #18
 8000f48:	d123      	bne.n	8000f92 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3208      	adds	r2, #8
 8000f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	691a      	ldr	r2, [r3, #16]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	69b9      	ldr	r1, [r7, #24]
 8000f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0203 	and.w	r2, r3, #3
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d00b      	beq.n	8000fe6 <HAL_GPIO_Init+0xe6>
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d007      	beq.n	8000fe6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fda:	2b11      	cmp	r3, #17
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b12      	cmp	r3, #18
 8000fe4:	d130      	bne.n	8001048 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800101c:	2201      	movs	r2, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	091b      	lsrs	r3, r3, #4
 8001032:	f003 0201 	and.w	r2, r3, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 80b4 	beq.w	80011ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b5f      	ldr	r3, [pc, #380]	; (8001208 <HAL_GPIO_Init+0x308>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a5e      	ldr	r2, [pc, #376]	; (8001208 <HAL_GPIO_Init+0x308>)
 8001090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b5c      	ldr	r3, [pc, #368]	; (8001208 <HAL_GPIO_Init+0x308>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a2:	4a5a      	ldr	r2, [pc, #360]	; (800120c <HAL_GPIO_Init+0x30c>)
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	3302      	adds	r3, #2
 80010aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	220f      	movs	r2, #15
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a51      	ldr	r2, [pc, #324]	; (8001210 <HAL_GPIO_Init+0x310>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d02b      	beq.n	8001126 <HAL_GPIO_Init+0x226>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a50      	ldr	r2, [pc, #320]	; (8001214 <HAL_GPIO_Init+0x314>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d025      	beq.n	8001122 <HAL_GPIO_Init+0x222>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4f      	ldr	r2, [pc, #316]	; (8001218 <HAL_GPIO_Init+0x318>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d01f      	beq.n	800111e <HAL_GPIO_Init+0x21e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4e      	ldr	r2, [pc, #312]	; (800121c <HAL_GPIO_Init+0x31c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d019      	beq.n	800111a <HAL_GPIO_Init+0x21a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4d      	ldr	r2, [pc, #308]	; (8001220 <HAL_GPIO_Init+0x320>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d013      	beq.n	8001116 <HAL_GPIO_Init+0x216>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4c      	ldr	r2, [pc, #304]	; (8001224 <HAL_GPIO_Init+0x324>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d00d      	beq.n	8001112 <HAL_GPIO_Init+0x212>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4b      	ldr	r2, [pc, #300]	; (8001228 <HAL_GPIO_Init+0x328>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d007      	beq.n	800110e <HAL_GPIO_Init+0x20e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4a      	ldr	r2, [pc, #296]	; (800122c <HAL_GPIO_Init+0x32c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d101      	bne.n	800110a <HAL_GPIO_Init+0x20a>
 8001106:	2307      	movs	r3, #7
 8001108:	e00e      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800110a:	2308      	movs	r3, #8
 800110c:	e00c      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800110e:	2306      	movs	r3, #6
 8001110:	e00a      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001112:	2305      	movs	r3, #5
 8001114:	e008      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001116:	2304      	movs	r3, #4
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800111a:	2303      	movs	r3, #3
 800111c:	e004      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800111e:	2302      	movs	r3, #2
 8001120:	e002      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001126:	2300      	movs	r3, #0
 8001128:	69fa      	ldr	r2, [r7, #28]
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4093      	lsls	r3, r2
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001138:	4934      	ldr	r1, [pc, #208]	; (800120c <HAL_GPIO_Init+0x30c>)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001146:	4b3a      	ldr	r3, [pc, #232]	; (8001230 <HAL_GPIO_Init+0x330>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800116a:	4a31      	ldr	r2, [pc, #196]	; (8001230 <HAL_GPIO_Init+0x330>)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001170:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <HAL_GPIO_Init+0x330>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001194:	4a26      	ldr	r2, [pc, #152]	; (8001230 <HAL_GPIO_Init+0x330>)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119a:	4b25      	ldr	r3, [pc, #148]	; (8001230 <HAL_GPIO_Init+0x330>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011be:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <HAL_GPIO_Init+0x330>)
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c4:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <HAL_GPIO_Init+0x330>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e8:	4a11      	ldr	r2, [pc, #68]	; (8001230 <HAL_GPIO_Init+0x330>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3301      	adds	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	2b0f      	cmp	r3, #15
 80011f8:	f67f ae90 	bls.w	8000f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011fc:	bf00      	nop
 80011fe:	3724      	adds	r7, #36	; 0x24
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	40023800 	.word	0x40023800
 800120c:	40013800 	.word	0x40013800
 8001210:	40020000 	.word	0x40020000
 8001214:	40020400 	.word	0x40020400
 8001218:	40020800 	.word	0x40020800
 800121c:	40020c00 	.word	0x40020c00
 8001220:	40021000 	.word	0x40021000
 8001224:	40021400 	.word	0x40021400
 8001228:	40021800 	.word	0x40021800
 800122c:	40021c00 	.word	0x40021c00
 8001230:	40013c00 	.word	0x40013c00

08001234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
 8001240:	4613      	mov	r3, r2
 8001242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001244:	787b      	ldrb	r3, [r7, #1]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001250:	e003      	b.n	800125a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	041a      	lsls	r2, r3, #16
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	619a      	str	r2, [r3, #24]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001274:	695a      	ldr	r2, [r3, #20]
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	4013      	ands	r3, r2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d006      	beq.n	800128c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800127e:	4a05      	ldr	r2, [pc, #20]	; (8001294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	4618      	mov	r0, r3
 8001288:	f001 fe64 	bl	8002f54 <HAL_GPIO_EXTI_Callback>
  }
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40013c00 	.word	0x40013c00

08001298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e22d      	b.n	8001706 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d075      	beq.n	80013a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012b6:	4ba3      	ldr	r3, [pc, #652]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d00c      	beq.n	80012dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c2:	4ba0      	ldr	r3, [pc, #640]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d112      	bne.n	80012f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ce:	4b9d      	ldr	r3, [pc, #628]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012da:	d10b      	bne.n	80012f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012dc:	4b99      	ldr	r3, [pc, #612]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d05b      	beq.n	80013a0 <HAL_RCC_OscConfig+0x108>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d157      	bne.n	80013a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e208      	b.n	8001706 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012fc:	d106      	bne.n	800130c <HAL_RCC_OscConfig+0x74>
 80012fe:	4b91      	ldr	r3, [pc, #580]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a90      	ldr	r2, [pc, #576]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e01d      	b.n	8001348 <HAL_RCC_OscConfig+0xb0>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0x98>
 8001316:	4b8b      	ldr	r3, [pc, #556]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a8a      	ldr	r2, [pc, #552]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800131c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b88      	ldr	r3, [pc, #544]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a87      	ldr	r2, [pc, #540]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e00b      	b.n	8001348 <HAL_RCC_OscConfig+0xb0>
 8001330:	4b84      	ldr	r3, [pc, #528]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a83      	ldr	r2, [pc, #524]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b81      	ldr	r3, [pc, #516]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a80      	ldr	r2, [pc, #512]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff f920 	bl	8000594 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff f91c 	bl	8000594 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	; 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e1cd      	b.n	8001706 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	4b76      	ldr	r3, [pc, #472]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0xc0>
 8001376:	e014      	b.n	80013a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff f90c 	bl	8000594 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff f908 	bl	8000594 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e1b9      	b.n	8001706 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001392:	4b6c      	ldr	r3, [pc, #432]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0xe8>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d063      	beq.n	8001476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ae:	4b65      	ldr	r3, [pc, #404]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00b      	beq.n	80013d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ba:	4b62      	ldr	r3, [pc, #392]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d11c      	bne.n	8001400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c6:	4b5f      	ldr	r3, [pc, #380]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d116      	bne.n	8001400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d2:	4b5c      	ldr	r3, [pc, #368]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <HAL_RCC_OscConfig+0x152>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e18d      	b.n	8001706 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ea:	4b56      	ldr	r3, [pc, #344]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4952      	ldr	r1, [pc, #328]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	e03a      	b.n	8001476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d020      	beq.n	800144a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001408:	4b4f      	ldr	r3, [pc, #316]	; (8001548 <HAL_RCC_OscConfig+0x2b0>)
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140e:	f7ff f8c1 	bl	8000594 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001416:	f7ff f8bd 	bl	8000594 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e16e      	b.n	8001706 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001428:	4b46      	ldr	r3, [pc, #280]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001434:	4b43      	ldr	r3, [pc, #268]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4940      	ldr	r1, [pc, #256]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
 8001448:	e015      	b.n	8001476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800144a:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <HAL_RCC_OscConfig+0x2b0>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001450:	f7ff f8a0 	bl	8000594 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001458:	f7ff f89c 	bl	8000594 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e14d      	b.n	8001706 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146a:	4b36      	ldr	r3, [pc, #216]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d030      	beq.n	80014e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d016      	beq.n	80014b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148a:	4b30      	ldr	r3, [pc, #192]	; (800154c <HAL_RCC_OscConfig+0x2b4>)
 800148c:	2201      	movs	r2, #1
 800148e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001490:	f7ff f880 	bl	8000594 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001498:	f7ff f87c 	bl	8000594 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e12d      	b.n	8001706 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	4b26      	ldr	r3, [pc, #152]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x200>
 80014b6:	e015      	b.n	80014e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b8:	4b24      	ldr	r3, [pc, #144]	; (800154c <HAL_RCC_OscConfig+0x2b4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014be:	f7ff f869 	bl	8000594 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c6:	f7ff f865 	bl	8000594 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e116      	b.n	8001706 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80014da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f0      	bne.n	80014c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 80a0 	beq.w	8001632 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10f      	bne.n	8001522 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800151e:	2301      	movs	r3, #1
 8001520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_RCC_OscConfig+0x2b8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152a:	2b00      	cmp	r3, #0
 800152c:	d121      	bne.n	8001572 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_RCC_OscConfig+0x2b8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a07      	ldr	r2, [pc, #28]	; (8001550 <HAL_RCC_OscConfig+0x2b8>)
 8001534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153a:	f7ff f82b 	bl	8000594 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	e011      	b.n	8001566 <HAL_RCC_OscConfig+0x2ce>
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	42470000 	.word	0x42470000
 800154c:	42470e80 	.word	0x42470e80
 8001550:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001554:	f7ff f81e 	bl	8000594 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e0cf      	b.n	8001706 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001566:	4b6a      	ldr	r3, [pc, #424]	; (8001710 <HAL_RCC_OscConfig+0x478>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d106      	bne.n	8001588 <HAL_RCC_OscConfig+0x2f0>
 800157a:	4b66      	ldr	r3, [pc, #408]	; (8001714 <HAL_RCC_OscConfig+0x47c>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157e:	4a65      	ldr	r2, [pc, #404]	; (8001714 <HAL_RCC_OscConfig+0x47c>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6713      	str	r3, [r2, #112]	; 0x70
 8001586:	e01c      	b.n	80015c2 <HAL_RCC_OscConfig+0x32a>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b05      	cmp	r3, #5
 800158e:	d10c      	bne.n	80015aa <HAL_RCC_OscConfig+0x312>
 8001590:	4b60      	ldr	r3, [pc, #384]	; (8001714 <HAL_RCC_OscConfig+0x47c>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	4a5f      	ldr	r2, [pc, #380]	; (8001714 <HAL_RCC_OscConfig+0x47c>)
 8001596:	f043 0304 	orr.w	r3, r3, #4
 800159a:	6713      	str	r3, [r2, #112]	; 0x70
 800159c:	4b5d      	ldr	r3, [pc, #372]	; (8001714 <HAL_RCC_OscConfig+0x47c>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	4a5c      	ldr	r2, [pc, #368]	; (8001714 <HAL_RCC_OscConfig+0x47c>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6713      	str	r3, [r2, #112]	; 0x70
 80015a8:	e00b      	b.n	80015c2 <HAL_RCC_OscConfig+0x32a>
 80015aa:	4b5a      	ldr	r3, [pc, #360]	; (8001714 <HAL_RCC_OscConfig+0x47c>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ae:	4a59      	ldr	r2, [pc, #356]	; (8001714 <HAL_RCC_OscConfig+0x47c>)
 80015b0:	f023 0301 	bic.w	r3, r3, #1
 80015b4:	6713      	str	r3, [r2, #112]	; 0x70
 80015b6:	4b57      	ldr	r3, [pc, #348]	; (8001714 <HAL_RCC_OscConfig+0x47c>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ba:	4a56      	ldr	r2, [pc, #344]	; (8001714 <HAL_RCC_OscConfig+0x47c>)
 80015bc:	f023 0304 	bic.w	r3, r3, #4
 80015c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d015      	beq.n	80015f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ca:	f7fe ffe3 	bl	8000594 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d0:	e00a      	b.n	80015e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d2:	f7fe ffdf 	bl	8000594 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e08e      	b.n	8001706 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e8:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <HAL_RCC_OscConfig+0x47c>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0ee      	beq.n	80015d2 <HAL_RCC_OscConfig+0x33a>
 80015f4:	e014      	b.n	8001620 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f6:	f7fe ffcd 	bl	8000594 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fe:	f7fe ffc9 	bl	8000594 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f241 3288 	movw	r2, #5000	; 0x1388
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e078      	b.n	8001706 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001614:	4b3f      	ldr	r3, [pc, #252]	; (8001714 <HAL_RCC_OscConfig+0x47c>)
 8001616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1ee      	bne.n	80015fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d105      	bne.n	8001632 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001626:	4b3b      	ldr	r3, [pc, #236]	; (8001714 <HAL_RCC_OscConfig+0x47c>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a3a      	ldr	r2, [pc, #232]	; (8001714 <HAL_RCC_OscConfig+0x47c>)
 800162c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d064      	beq.n	8001704 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800163a:	4b36      	ldr	r3, [pc, #216]	; (8001714 <HAL_RCC_OscConfig+0x47c>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b08      	cmp	r3, #8
 8001644:	d05c      	beq.n	8001700 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d141      	bne.n	80016d2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164e:	4b32      	ldr	r3, [pc, #200]	; (8001718 <HAL_RCC_OscConfig+0x480>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7fe ff9e 	bl	8000594 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165c:	f7fe ff9a 	bl	8000594 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e04b      	b.n	8001706 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166e:	4b29      	ldr	r3, [pc, #164]	; (8001714 <HAL_RCC_OscConfig+0x47c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69da      	ldr	r2, [r3, #28]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	019b      	lsls	r3, r3, #6
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001690:	085b      	lsrs	r3, r3, #1
 8001692:	3b01      	subs	r3, #1
 8001694:	041b      	lsls	r3, r3, #16
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	061b      	lsls	r3, r3, #24
 800169e:	491d      	ldr	r1, [pc, #116]	; (8001714 <HAL_RCC_OscConfig+0x47c>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a4:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <HAL_RCC_OscConfig+0x480>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016aa:	f7fe ff73 	bl	8000594 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b2:	f7fe ff6f 	bl	8000594 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e020      	b.n	8001706 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c4:	4b13      	ldr	r3, [pc, #76]	; (8001714 <HAL_RCC_OscConfig+0x47c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0f0      	beq.n	80016b2 <HAL_RCC_OscConfig+0x41a>
 80016d0:	e018      	b.n	8001704 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_RCC_OscConfig+0x480>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7fe ff5c 	bl	8000594 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e0:	f7fe ff58 	bl	8000594 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e009      	b.n	8001706 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <HAL_RCC_OscConfig+0x47c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x448>
 80016fe:	e001      	b.n	8001704 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40007000 	.word	0x40007000
 8001714:	40023800 	.word	0x40023800
 8001718:	42470060 	.word	0x42470060

0800171c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0ca      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001730:	4b67      	ldr	r3, [pc, #412]	; (80018d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 030f 	and.w	r3, r3, #15
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d90c      	bls.n	8001758 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173e:	4b64      	ldr	r3, [pc, #400]	; (80018d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001746:	4b62      	ldr	r3, [pc, #392]	; (80018d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d001      	beq.n	8001758 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0b6      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d020      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	d005      	beq.n	800177c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001770:	4b58      	ldr	r3, [pc, #352]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	4a57      	ldr	r2, [pc, #348]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001776:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800177a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001788:	4b52      	ldr	r3, [pc, #328]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4a51      	ldr	r2, [pc, #324]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 800178e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001792:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001794:	4b4f      	ldr	r3, [pc, #316]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	494c      	ldr	r1, [pc, #304]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d044      	beq.n	800183c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d107      	bne.n	80017ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	4b46      	ldr	r3, [pc, #280]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d119      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e07d      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d003      	beq.n	80017da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017da:	4b3e      	ldr	r3, [pc, #248]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d109      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e06d      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ea:	4b3a      	ldr	r3, [pc, #232]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e065      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017fa:	4b36      	ldr	r3, [pc, #216]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f023 0203 	bic.w	r2, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4933      	ldr	r1, [pc, #204]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001808:	4313      	orrs	r3, r2
 800180a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800180c:	f7fe fec2 	bl	8000594 <HAL_GetTick>
 8001810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001812:	e00a      	b.n	800182a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001814:	f7fe febe 	bl	8000594 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e04d      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 020c 	and.w	r2, r3, #12
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	429a      	cmp	r2, r3
 800183a:	d1eb      	bne.n	8001814 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_RCC_ClockConfig+0x1b4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 030f 	and.w	r3, r3, #15
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d20c      	bcs.n	8001864 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <HAL_RCC_ClockConfig+0x1b4>)
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001852:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e030      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d008      	beq.n	8001882 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001870:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	4915      	ldr	r1, [pc, #84]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 800187e:	4313      	orrs	r3, r2
 8001880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d009      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	490d      	ldr	r1, [pc, #52]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018a2:	f000 f81d 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 80018a6:	4601      	mov	r1, r0
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	4a09      	ldr	r2, [pc, #36]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	5cd3      	ldrb	r3, [r2, r3]
 80018b6:	fa21 f303 	lsr.w	r3, r1, r3
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80018be:	2000      	movs	r0, #0
 80018c0:	f7fe fe24 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023c00 	.word	0x40023c00
 80018d4:	40023800 	.word	0x40023800
 80018d8:	080033d0 	.word	0x080033d0
 80018dc:	20000008 	.word	0x20000008

080018e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	2300      	movs	r3, #0
 80018f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018f6:	4b63      	ldr	r3, [pc, #396]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d007      	beq.n	8001912 <HAL_RCC_GetSysClockFreq+0x32>
 8001902:	2b08      	cmp	r3, #8
 8001904:	d008      	beq.n	8001918 <HAL_RCC_GetSysClockFreq+0x38>
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 80b4 	bne.w	8001a74 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800190c:	4b5e      	ldr	r3, [pc, #376]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800190e:	60bb      	str	r3, [r7, #8]
       break;
 8001910:	e0b3      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001912:	4b5e      	ldr	r3, [pc, #376]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001914:	60bb      	str	r3, [r7, #8]
      break;
 8001916:	e0b0      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001918:	4b5a      	ldr	r3, [pc, #360]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001920:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001922:	4b58      	ldr	r3, [pc, #352]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d04a      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800192e:	4b55      	ldr	r3, [pc, #340]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	099b      	lsrs	r3, r3, #6
 8001934:	f04f 0400 	mov.w	r4, #0
 8001938:	f240 11ff 	movw	r1, #511	; 0x1ff
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	ea03 0501 	and.w	r5, r3, r1
 8001944:	ea04 0602 	and.w	r6, r4, r2
 8001948:	4629      	mov	r1, r5
 800194a:	4632      	mov	r2, r6
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	f04f 0400 	mov.w	r4, #0
 8001954:	0154      	lsls	r4, r2, #5
 8001956:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800195a:	014b      	lsls	r3, r1, #5
 800195c:	4619      	mov	r1, r3
 800195e:	4622      	mov	r2, r4
 8001960:	1b49      	subs	r1, r1, r5
 8001962:	eb62 0206 	sbc.w	r2, r2, r6
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	f04f 0400 	mov.w	r4, #0
 800196e:	0194      	lsls	r4, r2, #6
 8001970:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001974:	018b      	lsls	r3, r1, #6
 8001976:	1a5b      	subs	r3, r3, r1
 8001978:	eb64 0402 	sbc.w	r4, r4, r2
 800197c:	f04f 0100 	mov.w	r1, #0
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	00e2      	lsls	r2, r4, #3
 8001986:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800198a:	00d9      	lsls	r1, r3, #3
 800198c:	460b      	mov	r3, r1
 800198e:	4614      	mov	r4, r2
 8001990:	195b      	adds	r3, r3, r5
 8001992:	eb44 0406 	adc.w	r4, r4, r6
 8001996:	f04f 0100 	mov.w	r1, #0
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	0262      	lsls	r2, r4, #9
 80019a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80019a4:	0259      	lsls	r1, r3, #9
 80019a6:	460b      	mov	r3, r1
 80019a8:	4614      	mov	r4, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	4621      	mov	r1, r4
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f04f 0400 	mov.w	r4, #0
 80019b4:	461a      	mov	r2, r3
 80019b6:	4623      	mov	r3, r4
 80019b8:	f7fe fc06 	bl	80001c8 <__aeabi_uldivmod>
 80019bc:	4603      	mov	r3, r0
 80019be:	460c      	mov	r4, r1
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	e049      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c4:	4b2f      	ldr	r3, [pc, #188]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	099b      	lsrs	r3, r3, #6
 80019ca:	f04f 0400 	mov.w	r4, #0
 80019ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	ea03 0501 	and.w	r5, r3, r1
 80019da:	ea04 0602 	and.w	r6, r4, r2
 80019de:	4629      	mov	r1, r5
 80019e0:	4632      	mov	r2, r6
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	f04f 0400 	mov.w	r4, #0
 80019ea:	0154      	lsls	r4, r2, #5
 80019ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019f0:	014b      	lsls	r3, r1, #5
 80019f2:	4619      	mov	r1, r3
 80019f4:	4622      	mov	r2, r4
 80019f6:	1b49      	subs	r1, r1, r5
 80019f8:	eb62 0206 	sbc.w	r2, r2, r6
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	f04f 0400 	mov.w	r4, #0
 8001a04:	0194      	lsls	r4, r2, #6
 8001a06:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a0a:	018b      	lsls	r3, r1, #6
 8001a0c:	1a5b      	subs	r3, r3, r1
 8001a0e:	eb64 0402 	sbc.w	r4, r4, r2
 8001a12:	f04f 0100 	mov.w	r1, #0
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	00e2      	lsls	r2, r4, #3
 8001a1c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a20:	00d9      	lsls	r1, r3, #3
 8001a22:	460b      	mov	r3, r1
 8001a24:	4614      	mov	r4, r2
 8001a26:	195b      	adds	r3, r3, r5
 8001a28:	eb44 0406 	adc.w	r4, r4, r6
 8001a2c:	f04f 0100 	mov.w	r1, #0
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	02a2      	lsls	r2, r4, #10
 8001a36:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a3a:	0299      	lsls	r1, r3, #10
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4614      	mov	r4, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	4621      	mov	r1, r4
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f04f 0400 	mov.w	r4, #0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4623      	mov	r3, r4
 8001a4e:	f7fe fbbb 	bl	80001c8 <__aeabi_uldivmod>
 8001a52:	4603      	mov	r3, r0
 8001a54:	460c      	mov	r4, r1
 8001a56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	0c1b      	lsrs	r3, r3, #16
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	3301      	adds	r3, #1
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a70:	60bb      	str	r3, [r7, #8]
      break;
 8001a72:	e002      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a76:	60bb      	str	r3, [r7, #8]
      break;
 8001a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a84:	40023800 	.word	0x40023800
 8001a88:	00f42400 	.word	0x00f42400
 8001a8c:	007a1200 	.word	0x007a1200

08001a90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e056      	b.n	8001b50 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d106      	bne.n	8001ac2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f001 faa5 	bl	800300c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ad8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	ea42 0103 	orr.w	r1, r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	0c1b      	lsrs	r3, r3, #16
 8001b20:	f003 0104 	and.w	r1, r3, #4
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	69da      	ldr	r2, [r3, #28]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_SPI_TransmitReceive_DMA+0x20>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e0e3      	b.n	8001d40 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b86:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8001b8e:	7dbb      	ldrb	r3, [r7, #22]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d00d      	beq.n	8001bb0 <HAL_SPI_TransmitReceive_DMA+0x58>
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b9a:	d106      	bne.n	8001baa <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d102      	bne.n	8001baa <HAL_SPI_TransmitReceive_DMA+0x52>
 8001ba4:	7dbb      	ldrb	r3, [r7, #22]
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d002      	beq.n	8001bb0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8001baa:	2302      	movs	r3, #2
 8001bac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001bae:	e0c2      	b.n	8001d36 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d005      	beq.n	8001bc2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8001bbc:	887b      	ldrh	r3, [r7, #2]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d102      	bne.n	8001bc8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001bc6:	e0b6      	b.n	8001d36 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d003      	beq.n	8001bdc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2205      	movs	r2, #5
 8001bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	887a      	ldrh	r2, [r7, #2]
 8001bf2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	887a      	ldrh	r2, [r7, #2]
 8001bfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	887a      	ldrh	r2, [r7, #2]
 8001c04:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d108      	bne.n	8001c30 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	4a49      	ldr	r2, [pc, #292]	; (8001d48 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	4a48      	ldr	r2, [pc, #288]	; (8001d4c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8001c2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c2e:	e007      	b.n	8001c40 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c34:	4a46      	ldr	r2, [pc, #280]	; (8001d50 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8001c36:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3c:	4a45      	ldr	r2, [pc, #276]	; (8001d54 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8001c3e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c44:	4a44      	ldr	r2, [pc, #272]	; (8001d58 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8001c46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	330c      	adds	r3, #12
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c60:	461a      	mov	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	f7fe fe60 	bl	800092c <HAL_DMA_Start_IT>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00c      	beq.n	8001c8c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c76:	f043 0210 	orr.w	r2, r3, #16
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8001c8a:	e054      	b.n	8001d36 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca8:	2200      	movs	r2, #0
 8001caa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb8:	2200      	movs	r2, #0
 8001cba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	330c      	adds	r3, #12
 8001ccc:	461a      	mov	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	f7fe fe2a 	bl	800092c <HAL_DMA_Start_IT>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00c      	beq.n	8001cf8 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce2:	f043 0210 	orr.w	r2, r3, #16
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8001cf6:	e01e      	b.n	8001d36 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d02:	2b40      	cmp	r3, #64	; 0x40
 8001d04:	d007      	beq.n	8001d16 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d14:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 0220 	orr.w	r2, r2, #32
 8001d24:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f042 0202 	orr.w	r2, r2, #2
 8001d34:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	080020c1 	.word	0x080020c1
 8001d4c:	08001fad 	.word	0x08001fad
 8001d50:	080020dd 	.word	0x080020dd
 8001d54:	08002031 	.word	0x08002031
 8001d58:	080020f9 	.word	0x080020f9

08001d5c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	099b      	lsrs	r3, r3, #6
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10f      	bne.n	8001da0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00a      	beq.n	8001da0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	099b      	lsrs	r3, r3, #6
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d004      	beq.n	8001da0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	4798      	blx	r3
    return;
 8001d9e:	e0d8      	b.n	8001f52 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	085b      	lsrs	r3, r3, #1
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00a      	beq.n	8001dc2 <HAL_SPI_IRQHandler+0x66>
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	09db      	lsrs	r3, r3, #7
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d004      	beq.n	8001dc2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	4798      	blx	r3
    return;
 8001dc0:	e0c7      	b.n	8001f52 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	095b      	lsrs	r3, r3, #5
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10c      	bne.n	8001de8 <HAL_SPI_IRQHandler+0x8c>
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	099b      	lsrs	r3, r3, #6
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d106      	bne.n	8001de8 <HAL_SPI_IRQHandler+0x8c>
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 80b5 	beq.w	8001f52 <HAL_SPI_IRQHandler+0x1f6>
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80ae 	beq.w	8001f52 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	099b      	lsrs	r3, r3, #6
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d023      	beq.n	8001e4a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d011      	beq.n	8001e32 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e12:	f043 0204 	orr.w	r2, r3, #4
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	e00b      	b.n	8001e4a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	693b      	ldr	r3, [r7, #16]
        return;
 8001e48:	e083      	b.n	8001f52 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	095b      	lsrs	r3, r3, #5
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d014      	beq.n	8001e80 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5a:	f043 0201 	orr.w	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00c      	beq.n	8001ea6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e90:	f043 0208 	orr.w	r2, r3, #8
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d050      	beq.n	8001f50 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001ebc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d104      	bne.n	8001eda <HAL_SPI_IRQHandler+0x17e>
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d034      	beq.n	8001f44 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0203 	bic.w	r2, r2, #3
 8001ee8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d011      	beq.n	8001f16 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	4a18      	ldr	r2, [pc, #96]	; (8001f58 <HAL_SPI_IRQHandler+0x1fc>)
 8001ef8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fd74 	bl	80009ec <HAL_DMA_Abort_IT>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d016      	beq.n	8001f4c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f22:	4a0d      	ldr	r2, [pc, #52]	; (8001f58 <HAL_SPI_IRQHandler+0x1fc>)
 8001f24:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fd5e 	bl	80009ec <HAL_DMA_Abort_IT>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00a      	beq.n	8001f4c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001f42:	e003      	b.n	8001f4c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f827 	bl	8001f98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001f4a:	e000      	b.n	8001f4e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8001f4c:	bf00      	nop
    return;
 8001f4e:	bf00      	nop
 8001f50:	bf00      	nop
  }
}
 8001f52:	3720      	adds	r7, #32
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	08002139 	.word	0x08002139

08001f5c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fba:	f7fe faeb 	bl	8000594 <HAL_GetTick>
 8001fbe:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fce:	d029      	beq.n	8002024 <SPI_DMAReceiveCplt+0x78>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0220 	bic.w	r2, r2, #32
 8001fde:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0203 	bic.w	r2, r2, #3
 8001fee:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	2164      	movs	r1, #100	; 0x64
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 f91d 	bl	8002234 <SPI_EndRxTransaction>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d002      	beq.n	8002006 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2220      	movs	r2, #32
 8002004:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <SPI_DMAReceiveCplt+0x78>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f7ff ffbb 	bl	8001f98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002022:	e002      	b.n	800202a <SPI_DMAReceiveCplt+0x7e>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f7ff ff99 	bl	8001f5c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800203e:	f7fe faa9 	bl	8000594 <HAL_GetTick>
 8002042:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002052:	d02f      	beq.n	80020b4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0220 	bic.w	r2, r2, #32
 8002062:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	2164      	movs	r1, #100	; 0x64
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f949 	bl	8002300 <SPI_EndRxTxTransaction>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002078:	f043 0220 	orr.w	r2, r3, #32
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0203 	bic.w	r2, r2, #3
 800208e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f7ff ff73 	bl	8001f98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80020b2:	e002      	b.n	80020ba <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 ff31 	bl	8002f1c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020cc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f7ff ff4e 	bl	8001f70 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80020d4:	bf00      	nop
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7ff ff4a 	bl	8001f84 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002104:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0203 	bic.w	r2, r2, #3
 8002114:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211a:	f043 0210 	orr.w	r2, r3, #16
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f7ff ff34 	bl	8001f98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002130:	bf00      	nop
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002144:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f7ff ff20 	bl	8001f98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002158:	bf00      	nop
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	4613      	mov	r3, r2
 800216e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002170:	e04c      	b.n	800220c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002178:	d048      	beq.n	800220c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800217a:	f7fe fa0b 	bl	8000594 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d902      	bls.n	8002190 <SPI_WaitFlagStateUntilTimeout+0x30>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d13d      	bne.n	800220c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800219e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021a8:	d111      	bne.n	80021ce <SPI_WaitFlagStateUntilTimeout+0x6e>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021b2:	d004      	beq.n	80021be <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021bc:	d107      	bne.n	80021ce <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d6:	d10f      	bne.n	80021f8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e00f      	b.n	800222c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	4013      	ands	r3, r2
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	429a      	cmp	r2, r3
 800221a:	bf0c      	ite	eq
 800221c:	2301      	moveq	r3, #1
 800221e:	2300      	movne	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	461a      	mov	r2, r3
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	429a      	cmp	r2, r3
 8002228:	d1a3      	bne.n	8002172 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af02      	add	r7, sp, #8
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002248:	d111      	bne.n	800226e <SPI_EndRxTransaction+0x3a>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002252:	d004      	beq.n	800225e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800225c:	d107      	bne.n	800226e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800226c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002276:	d12a      	bne.n	80022ce <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002280:	d012      	beq.n	80022a8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2200      	movs	r2, #0
 800228a:	2180      	movs	r1, #128	; 0x80
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f7ff ff67 	bl	8002160 <SPI_WaitFlagStateUntilTimeout>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d02d      	beq.n	80022f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229c:	f043 0220 	orr.w	r2, r3, #32
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e026      	b.n	80022f6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2200      	movs	r2, #0
 80022b0:	2101      	movs	r1, #1
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f7ff ff54 	bl	8002160 <SPI_WaitFlagStateUntilTimeout>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d01a      	beq.n	80022f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c2:	f043 0220 	orr.w	r2, r3, #32
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e013      	b.n	80022f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2200      	movs	r2, #0
 80022d6:	2101      	movs	r1, #1
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f7ff ff41 	bl	8002160 <SPI_WaitFlagStateUntilTimeout>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d007      	beq.n	80022f4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e8:	f043 0220 	orr.w	r2, r3, #32
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e000      	b.n	80022f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af02      	add	r7, sp, #8
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800230c:	4b1b      	ldr	r3, [pc, #108]	; (800237c <SPI_EndRxTxTransaction+0x7c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a1b      	ldr	r2, [pc, #108]	; (8002380 <SPI_EndRxTxTransaction+0x80>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	0d5b      	lsrs	r3, r3, #21
 8002318:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800231c:	fb02 f303 	mul.w	r3, r2, r3
 8002320:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800232a:	d112      	bne.n	8002352 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2200      	movs	r2, #0
 8002334:	2180      	movs	r1, #128	; 0x80
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f7ff ff12 	bl	8002160 <SPI_WaitFlagStateUntilTimeout>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d016      	beq.n	8002370 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002346:	f043 0220 	orr.w	r2, r3, #32
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e00f      	b.n	8002372 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00a      	beq.n	800236e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	3b01      	subs	r3, #1
 800235c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002368:	2b80      	cmp	r3, #128	; 0x80
 800236a:	d0f2      	beq.n	8002352 <SPI_EndRxTxTransaction+0x52>
 800236c:	e000      	b.n	8002370 <SPI_EndRxTxTransaction+0x70>
        break;
 800236e:	bf00      	nop
  }

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000008 	.word	0x20000008
 8002380:	165e9f81 	.word	0x165e9f81

08002384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e01d      	b.n	80023d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fee2 	bl	8003174 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3304      	adds	r3, #4
 80023c0:	4619      	mov	r1, r3
 80023c2:	4610      	mov	r0, r2
 80023c4:	f000 fa14 	bl	80027f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023da:	b480      	push	{r7}
 80023dc:	b085      	sub	sp, #20
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 0201 	orr.w	r2, r2, #1
 80023f0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b06      	cmp	r3, #6
 8002402:	d007      	beq.n	8002414 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b02      	cmp	r3, #2
 8002436:	d122      	bne.n	800247e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b02      	cmp	r3, #2
 8002444:	d11b      	bne.n	800247e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f06f 0202 	mvn.w	r2, #2
 800244e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f9a5 	bl	80027b4 <HAL_TIM_IC_CaptureCallback>
 800246a:	e005      	b.n	8002478 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f997 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f9a8 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b04      	cmp	r3, #4
 800248a:	d122      	bne.n	80024d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	2b04      	cmp	r3, #4
 8002498:	d11b      	bne.n	80024d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f06f 0204 	mvn.w	r2, #4
 80024a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f97b 	bl	80027b4 <HAL_TIM_IC_CaptureCallback>
 80024be:	e005      	b.n	80024cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f96d 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f97e 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d122      	bne.n	8002526 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d11b      	bne.n	8002526 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f06f 0208 	mvn.w	r2, #8
 80024f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2204      	movs	r2, #4
 80024fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f951 	bl	80027b4 <HAL_TIM_IC_CaptureCallback>
 8002512:	e005      	b.n	8002520 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f943 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f954 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b10      	cmp	r3, #16
 8002532:	d122      	bne.n	800257a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b10      	cmp	r3, #16
 8002540:	d11b      	bne.n	800257a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f06f 0210 	mvn.w	r2, #16
 800254a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2208      	movs	r2, #8
 8002550:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f927 	bl	80027b4 <HAL_TIM_IC_CaptureCallback>
 8002566:	e005      	b.n	8002574 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f919 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f92a 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d10e      	bne.n	80025a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b01      	cmp	r3, #1
 8002594:	d107      	bne.n	80025a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f06f 0201 	mvn.w	r2, #1
 800259e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 fce7 	bl	8002f74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b0:	2b80      	cmp	r3, #128	; 0x80
 80025b2:	d10e      	bne.n	80025d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025be:	2b80      	cmp	r3, #128	; 0x80
 80025c0:	d107      	bne.n	80025d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 fa98 	bl	8002b02 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025dc:	2b40      	cmp	r3, #64	; 0x40
 80025de:	d10e      	bne.n	80025fe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ea:	2b40      	cmp	r3, #64	; 0x40
 80025ec:	d107      	bne.n	80025fe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f8ef 	bl	80027dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b20      	cmp	r3, #32
 800260a:	d10e      	bne.n	800262a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f003 0320 	and.w	r3, r3, #32
 8002616:	2b20      	cmp	r3, #32
 8002618:	d107      	bne.n	800262a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f06f 0220 	mvn.w	r2, #32
 8002622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fa62 	bl	8002aee <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b084      	sub	sp, #16
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_TIM_ConfigClockSource+0x18>
 8002646:	2302      	movs	r3, #2
 8002648:	e0a6      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x166>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2202      	movs	r2, #2
 8002656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002668:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002670:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b40      	cmp	r3, #64	; 0x40
 8002680:	d067      	beq.n	8002752 <HAL_TIM_ConfigClockSource+0x120>
 8002682:	2b40      	cmp	r3, #64	; 0x40
 8002684:	d80b      	bhi.n	800269e <HAL_TIM_ConfigClockSource+0x6c>
 8002686:	2b10      	cmp	r3, #16
 8002688:	d073      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0x140>
 800268a:	2b10      	cmp	r3, #16
 800268c:	d802      	bhi.n	8002694 <HAL_TIM_ConfigClockSource+0x62>
 800268e:	2b00      	cmp	r3, #0
 8002690:	d06f      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002692:	e078      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002694:	2b20      	cmp	r3, #32
 8002696:	d06c      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0x140>
 8002698:	2b30      	cmp	r3, #48	; 0x30
 800269a:	d06a      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800269c:	e073      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800269e:	2b70      	cmp	r3, #112	; 0x70
 80026a0:	d00d      	beq.n	80026be <HAL_TIM_ConfigClockSource+0x8c>
 80026a2:	2b70      	cmp	r3, #112	; 0x70
 80026a4:	d804      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x7e>
 80026a6:	2b50      	cmp	r3, #80	; 0x50
 80026a8:	d033      	beq.n	8002712 <HAL_TIM_ConfigClockSource+0xe0>
 80026aa:	2b60      	cmp	r3, #96	; 0x60
 80026ac:	d041      	beq.n	8002732 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80026ae:	e06a      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b4:	d066      	beq.n	8002784 <HAL_TIM_ConfigClockSource+0x152>
 80026b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ba:	d017      	beq.n	80026ec <HAL_TIM_ConfigClockSource+0xba>
      break;
 80026bc:	e063      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	6899      	ldr	r1, [r3, #8]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f000 f9a9 	bl	8002a24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	609a      	str	r2, [r3, #8]
      break;
 80026ea:	e04c      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	6899      	ldr	r1, [r3, #8]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f000 f992 	bl	8002a24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800270e:	609a      	str	r2, [r3, #8]
      break;
 8002710:	e039      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6818      	ldr	r0, [r3, #0]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	6859      	ldr	r1, [r3, #4]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	461a      	mov	r2, r3
 8002720:	f000 f906 	bl	8002930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2150      	movs	r1, #80	; 0x50
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f95f 	bl	80029ee <TIM_ITRx_SetConfig>
      break;
 8002730:	e029      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6859      	ldr	r1, [r3, #4]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	461a      	mov	r2, r3
 8002740:	f000 f925 	bl	800298e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2160      	movs	r1, #96	; 0x60
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f94f 	bl	80029ee <TIM_ITRx_SetConfig>
      break;
 8002750:	e019      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6859      	ldr	r1, [r3, #4]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	461a      	mov	r2, r3
 8002760:	f000 f8e6 	bl	8002930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2140      	movs	r1, #64	; 0x40
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f93f 	bl	80029ee <TIM_ITRx_SetConfig>
      break;
 8002770:	e009      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4619      	mov	r1, r3
 800277c:	4610      	mov	r0, r2
 800277e:	f000 f936 	bl	80029ee <TIM_ITRx_SetConfig>
      break;
 8002782:	e000      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002784:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a40      	ldr	r2, [pc, #256]	; (8002904 <TIM_Base_SetConfig+0x114>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d013      	beq.n	8002830 <TIM_Base_SetConfig+0x40>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280e:	d00f      	beq.n	8002830 <TIM_Base_SetConfig+0x40>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a3d      	ldr	r2, [pc, #244]	; (8002908 <TIM_Base_SetConfig+0x118>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d00b      	beq.n	8002830 <TIM_Base_SetConfig+0x40>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a3c      	ldr	r2, [pc, #240]	; (800290c <TIM_Base_SetConfig+0x11c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d007      	beq.n	8002830 <TIM_Base_SetConfig+0x40>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a3b      	ldr	r2, [pc, #236]	; (8002910 <TIM_Base_SetConfig+0x120>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d003      	beq.n	8002830 <TIM_Base_SetConfig+0x40>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a3a      	ldr	r2, [pc, #232]	; (8002914 <TIM_Base_SetConfig+0x124>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d108      	bne.n	8002842 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a2f      	ldr	r2, [pc, #188]	; (8002904 <TIM_Base_SetConfig+0x114>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d02b      	beq.n	80028a2 <TIM_Base_SetConfig+0xb2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002850:	d027      	beq.n	80028a2 <TIM_Base_SetConfig+0xb2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a2c      	ldr	r2, [pc, #176]	; (8002908 <TIM_Base_SetConfig+0x118>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d023      	beq.n	80028a2 <TIM_Base_SetConfig+0xb2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a2b      	ldr	r2, [pc, #172]	; (800290c <TIM_Base_SetConfig+0x11c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d01f      	beq.n	80028a2 <TIM_Base_SetConfig+0xb2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a2a      	ldr	r2, [pc, #168]	; (8002910 <TIM_Base_SetConfig+0x120>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d01b      	beq.n	80028a2 <TIM_Base_SetConfig+0xb2>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a29      	ldr	r2, [pc, #164]	; (8002914 <TIM_Base_SetConfig+0x124>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d017      	beq.n	80028a2 <TIM_Base_SetConfig+0xb2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a28      	ldr	r2, [pc, #160]	; (8002918 <TIM_Base_SetConfig+0x128>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d013      	beq.n	80028a2 <TIM_Base_SetConfig+0xb2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a27      	ldr	r2, [pc, #156]	; (800291c <TIM_Base_SetConfig+0x12c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00f      	beq.n	80028a2 <TIM_Base_SetConfig+0xb2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a26      	ldr	r2, [pc, #152]	; (8002920 <TIM_Base_SetConfig+0x130>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00b      	beq.n	80028a2 <TIM_Base_SetConfig+0xb2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a25      	ldr	r2, [pc, #148]	; (8002924 <TIM_Base_SetConfig+0x134>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d007      	beq.n	80028a2 <TIM_Base_SetConfig+0xb2>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a24      	ldr	r2, [pc, #144]	; (8002928 <TIM_Base_SetConfig+0x138>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d003      	beq.n	80028a2 <TIM_Base_SetConfig+0xb2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a23      	ldr	r2, [pc, #140]	; (800292c <TIM_Base_SetConfig+0x13c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d108      	bne.n	80028b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <TIM_Base_SetConfig+0x114>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d003      	beq.n	80028e8 <TIM_Base_SetConfig+0xf8>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a0c      	ldr	r2, [pc, #48]	; (8002914 <TIM_Base_SetConfig+0x124>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d103      	bne.n	80028f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	615a      	str	r2, [r3, #20]
}
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40010000 	.word	0x40010000
 8002908:	40000400 	.word	0x40000400
 800290c:	40000800 	.word	0x40000800
 8002910:	40000c00 	.word	0x40000c00
 8002914:	40010400 	.word	0x40010400
 8002918:	40014000 	.word	0x40014000
 800291c:	40014400 	.word	0x40014400
 8002920:	40014800 	.word	0x40014800
 8002924:	40001800 	.word	0x40001800
 8002928:	40001c00 	.word	0x40001c00
 800292c:	40002000 	.word	0x40002000

08002930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002930:	b480      	push	{r7}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	f023 0201 	bic.w	r2, r3, #1
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800295a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f023 030a 	bic.w	r3, r3, #10
 800296c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4313      	orrs	r3, r2
 8002974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	621a      	str	r2, [r3, #32]
}
 8002982:	bf00      	nop
 8002984:	371c      	adds	r7, #28
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800298e:	b480      	push	{r7}
 8002990:	b087      	sub	sp, #28
 8002992:	af00      	add	r7, sp, #0
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	f023 0210 	bic.w	r2, r3, #16
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	031b      	lsls	r3, r3, #12
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	621a      	str	r2, [r3, #32]
}
 80029e2:	bf00      	nop
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b085      	sub	sp, #20
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f043 0307 	orr.w	r3, r3, #7
 8002a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	609a      	str	r2, [r3, #8]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	021a      	lsls	r2, r3, #8
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	609a      	str	r2, [r3, #8]
}
 8002a58:	bf00      	nop
 8002a5a:	371c      	adds	r7, #28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e032      	b.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ab4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <CTL_Ini>:
*  Parameter(s)   :  
*  Return Value   :  
******************************************************************************/

void CTL_Ini (void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0

}
 8002b1a:	bf00      	nop
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <CTL_Main>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void CTL_Main(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0

	//SM16126_DAT_C_RESET;
	//HAL_Delay(100);


}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b36:	f7fd fcc7 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b3a:	f000 f811 	bl	8002b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b3e:	f000 f91f 	bl	8002d80 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b42:	f000 f8f5 	bl	8002d30 <MX_DMA_Init>
  MX_SPI2_Init();
 8002b46:	f000 f875 	bl	8002c34 <MX_SPI2_Init>
  MX_TIM4_Init();
 8002b4a:	f000 f8a5 	bl	8002c98 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  TIM4_Ini();
 8002b4e:	f000 fbcd 	bl	80032ec <TIM4_Ini>
  SPI2_Ini();
 8002b52:	f000 fa21 	bl	8002f98 <SPI2_Ini>
  CTL_Ini();
 8002b56:	f7ff ffde 	bl	8002b16 <CTL_Ini>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  CTL_Main();
 8002b5a:	f7ff ffe3 	bl	8002b24 <CTL_Main>
 8002b5e:	e7fc      	b.n	8002b5a <main+0x28>

08002b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b094      	sub	sp, #80	; 0x50
 8002b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b66:	f107 0320 	add.w	r3, r7, #32
 8002b6a:	2230      	movs	r2, #48	; 0x30
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 fc16 	bl	80033a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b74:	f107 030c 	add.w	r3, r7, #12
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b84:	2300      	movs	r3, #0
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	4b28      	ldr	r3, [pc, #160]	; (8002c2c <SystemClock_Config+0xcc>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	4a27      	ldr	r2, [pc, #156]	; (8002c2c <SystemClock_Config+0xcc>)
 8002b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b92:	6413      	str	r3, [r2, #64]	; 0x40
 8002b94:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <SystemClock_Config+0xcc>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	4b22      	ldr	r3, [pc, #136]	; (8002c30 <SystemClock_Config+0xd0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a21      	ldr	r2, [pc, #132]	; (8002c30 <SystemClock_Config+0xd0>)
 8002baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b1f      	ldr	r3, [pc, #124]	; (8002c30 <SystemClock_Config+0xd0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb8:	607b      	str	r3, [r7, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002bd4:	23a8      	movs	r3, #168	; 0xa8
 8002bd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002bdc:	2304      	movs	r3, #4
 8002bde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002be0:	f107 0320 	add.w	r3, r7, #32
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe fb57 	bl	8001298 <HAL_RCC_OscConfig>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002bf0:	f000 f9ca 	bl	8002f88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bf4:	230f      	movs	r3, #15
 8002bf6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c0c:	f107 030c 	add.w	r3, r7, #12
 8002c10:	2105      	movs	r1, #5
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe fd82 	bl	800171c <HAL_RCC_ClockConfig>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002c1e:	f000 f9b3 	bl	8002f88 <Error_Handler>
  }
}
 8002c22:	bf00      	nop
 8002c24:	3750      	adds	r7, #80	; 0x50
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40007000 	.word	0x40007000

08002c34 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002c38:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <MX_SPI2_Init+0x5c>)
 8002c3a:	4a16      	ldr	r2, [pc, #88]	; (8002c94 <MX_SPI2_Init+0x60>)
 8002c3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8002c3e:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <MX_SPI2_Init+0x5c>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c44:	4b12      	ldr	r3, [pc, #72]	; (8002c90 <MX_SPI2_Init+0x5c>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <MX_SPI2_Init+0x5c>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002c50:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <MX_SPI2_Init+0x5c>)
 8002c52:	2202      	movs	r2, #2
 8002c54:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c56:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <MX_SPI2_Init+0x5c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <MX_SPI2_Init+0x5c>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <MX_SPI2_Init+0x5c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c68:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <MX_SPI2_Init+0x5c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c6e:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <MX_SPI2_Init+0x5c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002c74:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <MX_SPI2_Init+0x5c>)
 8002c76:	220a      	movs	r2, #10
 8002c78:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c7a:	4805      	ldr	r0, [pc, #20]	; (8002c90 <MX_SPI2_Init+0x5c>)
 8002c7c:	f7fe ff08 	bl	8001a90 <HAL_SPI_Init>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8002c86:	f000 f97f 	bl	8002f88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	2000002c 	.word	0x2000002c
 8002c94:	40003800 	.word	0x40003800

08002c98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c9e:	f107 0308 	add.w	r3, r7, #8
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	609a      	str	r2, [r3, #8]
 8002caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cac:	463b      	mov	r3, r7
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002cb4:	4b1c      	ldr	r3, [pc, #112]	; (8002d28 <MX_TIM4_Init+0x90>)
 8002cb6:	4a1d      	ldr	r2, [pc, #116]	; (8002d2c <MX_TIM4_Init+0x94>)
 8002cb8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16;
 8002cba:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <MX_TIM4_Init+0x90>)
 8002cbc:	2210      	movs	r2, #16
 8002cbe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cc0:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <MX_TIM4_Init+0x90>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 14;
 8002cc6:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <MX_TIM4_Init+0x90>)
 8002cc8:	220e      	movs	r2, #14
 8002cca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ccc:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <MX_TIM4_Init+0x90>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cd2:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <MX_TIM4_Init+0x90>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002cd8:	4813      	ldr	r0, [pc, #76]	; (8002d28 <MX_TIM4_Init+0x90>)
 8002cda:	f7ff fb53 	bl	8002384 <HAL_TIM_Base_Init>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8002ce4:	f000 f950 	bl	8002f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002cee:	f107 0308 	add.w	r3, r7, #8
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	480c      	ldr	r0, [pc, #48]	; (8002d28 <MX_TIM4_Init+0x90>)
 8002cf6:	f7ff fc9c 	bl	8002632 <HAL_TIM_ConfigClockSource>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8002d00:	f000 f942 	bl	8002f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d04:	2300      	movs	r3, #0
 8002d06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d0c:	463b      	mov	r3, r7
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4805      	ldr	r0, [pc, #20]	; (8002d28 <MX_TIM4_Init+0x90>)
 8002d12:	f7ff fea7 	bl	8002a64 <HAL_TIMEx_MasterConfigSynchronization>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8002d1c:	f000 f934 	bl	8002f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d20:	bf00      	nop
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20000084 	.word	0x20000084
 8002d2c:	40000800 	.word	0x40000800

08002d30 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	607b      	str	r3, [r7, #4]
 8002d3a:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <MX_DMA_Init+0x4c>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4a0f      	ldr	r2, [pc, #60]	; (8002d7c <MX_DMA_Init+0x4c>)
 8002d40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <MX_DMA_Init+0x4c>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d4e:	607b      	str	r3, [r7, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002d52:	2200      	movs	r2, #0
 8002d54:	2100      	movs	r1, #0
 8002d56:	200e      	movs	r0, #14
 8002d58:	f7fd fd03 	bl	8000762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002d5c:	200e      	movs	r0, #14
 8002d5e:	f7fd fd1c 	bl	800079a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002d62:	2200      	movs	r2, #0
 8002d64:	2100      	movs	r1, #0
 8002d66:	200f      	movs	r0, #15
 8002d68:	f7fd fcfb 	bl	8000762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002d6c:	200f      	movs	r0, #15
 8002d6e:	f7fd fd14 	bl	800079a <HAL_NVIC_EnableIRQ>

}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800

08002d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08c      	sub	sp, #48	; 0x30
 8002d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d86:	f107 031c 	add.w	r3, r7, #28
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	609a      	str	r2, [r3, #8]
 8002d92:	60da      	str	r2, [r3, #12]
 8002d94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	4b5a      	ldr	r3, [pc, #360]	; (8002f04 <MX_GPIO_Init+0x184>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	4a59      	ldr	r2, [pc, #356]	; (8002f04 <MX_GPIO_Init+0x184>)
 8002da0:	f043 0310 	orr.w	r3, r3, #16
 8002da4:	6313      	str	r3, [r2, #48]	; 0x30
 8002da6:	4b57      	ldr	r3, [pc, #348]	; (8002f04 <MX_GPIO_Init+0x184>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	61bb      	str	r3, [r7, #24]
 8002db0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	4b53      	ldr	r3, [pc, #332]	; (8002f04 <MX_GPIO_Init+0x184>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	4a52      	ldr	r2, [pc, #328]	; (8002f04 <MX_GPIO_Init+0x184>)
 8002dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc2:	4b50      	ldr	r3, [pc, #320]	; (8002f04 <MX_GPIO_Init+0x184>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	4b4c      	ldr	r3, [pc, #304]	; (8002f04 <MX_GPIO_Init+0x184>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4a4b      	ldr	r2, [pc, #300]	; (8002f04 <MX_GPIO_Init+0x184>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dde:	4b49      	ldr	r3, [pc, #292]	; (8002f04 <MX_GPIO_Init+0x184>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	4b45      	ldr	r3, [pc, #276]	; (8002f04 <MX_GPIO_Init+0x184>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	4a44      	ldr	r2, [pc, #272]	; (8002f04 <MX_GPIO_Init+0x184>)
 8002df4:	f043 0302 	orr.w	r3, r3, #2
 8002df8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfa:	4b42      	ldr	r3, [pc, #264]	; (8002f04 <MX_GPIO_Init+0x184>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	4b3e      	ldr	r3, [pc, #248]	; (8002f04 <MX_GPIO_Init+0x184>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	4a3d      	ldr	r2, [pc, #244]	; (8002f04 <MX_GPIO_Init+0x184>)
 8002e10:	f043 0308 	orr.w	r3, r3, #8
 8002e14:	6313      	str	r3, [r2, #48]	; 0x30
 8002e16:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <MX_GPIO_Init+0x184>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	4b37      	ldr	r3, [pc, #220]	; (8002f04 <MX_GPIO_Init+0x184>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	4a36      	ldr	r2, [pc, #216]	; (8002f04 <MX_GPIO_Init+0x184>)
 8002e2c:	f043 0304 	orr.w	r3, r3, #4
 8002e30:	6313      	str	r3, [r2, #48]	; 0x30
 8002e32:	4b34      	ldr	r3, [pc, #208]	; (8002f04 <MX_GPIO_Init+0x184>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	607b      	str	r3, [r7, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	210c      	movs	r1, #12
 8002e42:	4831      	ldr	r0, [pc, #196]	; (8002f08 <MX_GPIO_Init+0x188>)
 8002e44:	f7fe f9f6 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f248 0101 	movw	r1, #32769	; 0x8001
 8002e4e:	482f      	ldr	r0, [pc, #188]	; (8002f0c <MX_GPIO_Init+0x18c>)
 8002e50:	f7fe f9f0 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10 
 8002e54:	2200      	movs	r2, #0
 8002e56:	f44f 51ee 	mov.w	r1, #7616	; 0x1dc0
 8002e5a:	482d      	ldr	r0, [pc, #180]	; (8002f10 <MX_GPIO_Init+0x190>)
 8002e5c:	f7fe f9ea 	bl	8001234 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e60:	2304      	movs	r3, #4
 8002e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e64:	2301      	movs	r3, #1
 8002e66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e70:	f107 031c 	add.w	r3, r7, #28
 8002e74:	4619      	mov	r1, r3
 8002e76:	4824      	ldr	r0, [pc, #144]	; (8002f08 <MX_GPIO_Init+0x188>)
 8002e78:	f7fe f842 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e7c:	2308      	movs	r3, #8
 8002e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e80:	2301      	movs	r3, #1
 8002e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e8c:	f107 031c 	add.w	r3, r7, #28
 8002e90:	4619      	mov	r1, r3
 8002e92:	481d      	ldr	r0, [pc, #116]	; (8002f08 <MX_GPIO_Init+0x188>)
 8002e94:	f7fe f834 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e9c:	4b1d      	ldr	r3, [pc, #116]	; (8002f14 <MX_GPIO_Init+0x194>)
 8002e9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea4:	f107 031c 	add.w	r3, r7, #28
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	481b      	ldr	r0, [pc, #108]	; (8002f18 <MX_GPIO_Init+0x198>)
 8002eac:	f7fe f828 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0;
 8002eb0:	f248 0301 	movw	r3, #32769	; 0x8001
 8002eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ec2:	f107 031c 	add.w	r3, r7, #28
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4810      	ldr	r0, [pc, #64]	; (8002f0c <MX_GPIO_Init+0x18c>)
 8002eca:	f7fe f819 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC10 
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10 
 8002ece:	f44f 53ee 	mov.w	r3, #7616	; 0x1dc0
 8002ed2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002edc:	2300      	movs	r3, #0
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ee0:	f107 031c 	add.w	r3, r7, #28
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	480a      	ldr	r0, [pc, #40]	; (8002f10 <MX_GPIO_Init+0x190>)
 8002ee8:	f7fe f80a 	bl	8000f00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002eec:	2200      	movs	r2, #0
 8002eee:	2100      	movs	r1, #0
 8002ef0:	2006      	movs	r0, #6
 8002ef2:	f7fd fc36 	bl	8000762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ef6:	2006      	movs	r0, #6
 8002ef8:	f7fd fc4f 	bl	800079a <HAL_NVIC_EnableIRQ>

}
 8002efc:	bf00      	nop
 8002efe:	3730      	adds	r7, #48	; 0x30
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40020c00 	.word	0x40020c00
 8002f10:	40020800 	.word	0x40020800
 8002f14:	10110000 	.word	0x10110000
 8002f18:	40020000 	.word	0x40020000

08002f1c <HAL_SPI_TxRxCpltCallback>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

	if(hspi->Instance==SPI2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a06      	ldr	r2, [pc, #24]	; (8002f44 <HAL_SPI_TxRxCpltCallback+0x28>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d106      	bne.n	8002f3c <HAL_SPI_TxRxCpltCallback+0x20>
	{
		HAL_SPI_TransmitReceive_DMA(&hspi2, SPI2_TxBuf, SPI2_RxBuf, SPI2_TXRX_BUFFER_SIZE);
 8002f2e:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8002f32:	4a05      	ldr	r2, [pc, #20]	; (8002f48 <HAL_SPI_TxRxCpltCallback+0x2c>)
 8002f34:	4905      	ldr	r1, [pc, #20]	; (8002f4c <HAL_SPI_TxRxCpltCallback+0x30>)
 8002f36:	4806      	ldr	r0, [pc, #24]	; (8002f50 <HAL_SPI_TxRxCpltCallback+0x34>)
 8002f38:	f7fe fe0e 	bl	8001b58 <HAL_SPI_TransmitReceive_DMA>



	}
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40003800 	.word	0x40003800
 8002f48:	200015c4 	.word	0x200015c4
 8002f4c:	20000184 	.word	0x20000184
 8002f50:	2000002c 	.word	0x2000002c

08002f54 <HAL_GPIO_EXTI_Callback>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_0)
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_GPIO_EXTI_Callback+0x14>
	{
			TUINT8 u8Temp;
			u8Temp = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	73fb      	strb	r3, [r7, #15]
	else
	{

	}

}
 8002f68:	bf00      	nop
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_TIM_PeriodElapsedCallback>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]

	//SM16126_DAT_C_SET;

	//SM16126_DAT_C_RESET;

}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <SPI2_Ini>:
*  Parameter(s)   :  
*  Return Value   :  
******************************************************************************/

void SPI2_Ini (void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
	HAL_SPI_TransmitReceive_DMA(&hspi2, SPI2_TxBuf, SPI2_RxBuf, SPI2_TXRX_BUFFER_SIZE);
 8002f9c:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8002fa0:	4a03      	ldr	r2, [pc, #12]	; (8002fb0 <SPI2_Ini+0x18>)
 8002fa2:	4904      	ldr	r1, [pc, #16]	; (8002fb4 <SPI2_Ini+0x1c>)
 8002fa4:	4804      	ldr	r0, [pc, #16]	; (8002fb8 <SPI2_Ini+0x20>)
 8002fa6:	f7fe fdd7 	bl	8001b58 <HAL_SPI_TransmitReceive_DMA>
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	200015c4 	.word	0x200015c4
 8002fb4:	20000184 	.word	0x20000184
 8002fb8:	2000002c 	.word	0x2000002c

08002fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	4b10      	ldr	r3, [pc, #64]	; (8003008 <HAL_MspInit+0x4c>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	4a0f      	ldr	r2, [pc, #60]	; (8003008 <HAL_MspInit+0x4c>)
 8002fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <HAL_MspInit+0x4c>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fda:	607b      	str	r3, [r7, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	603b      	str	r3, [r7, #0]
 8002fe2:	4b09      	ldr	r3, [pc, #36]	; (8003008 <HAL_MspInit+0x4c>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	4a08      	ldr	r2, [pc, #32]	; (8003008 <HAL_MspInit+0x4c>)
 8002fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fec:	6413      	str	r3, [r2, #64]	; 0x40
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_MspInit+0x4c>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40023800 	.word	0x40023800

0800300c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08a      	sub	sp, #40	; 0x28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	f107 0314 	add.w	r3, r7, #20
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a4b      	ldr	r2, [pc, #300]	; (8003158 <HAL_SPI_MspInit+0x14c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	f040 8090 	bne.w	8003150 <HAL_SPI_MspInit+0x144>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003030:	2300      	movs	r3, #0
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	4b49      	ldr	r3, [pc, #292]	; (800315c <HAL_SPI_MspInit+0x150>)
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	4a48      	ldr	r2, [pc, #288]	; (800315c <HAL_SPI_MspInit+0x150>)
 800303a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800303e:	6413      	str	r3, [r2, #64]	; 0x40
 8003040:	4b46      	ldr	r3, [pc, #280]	; (800315c <HAL_SPI_MspInit+0x150>)
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	4b42      	ldr	r3, [pc, #264]	; (800315c <HAL_SPI_MspInit+0x150>)
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	4a41      	ldr	r2, [pc, #260]	; (800315c <HAL_SPI_MspInit+0x150>)
 8003056:	f043 0302 	orr.w	r3, r3, #2
 800305a:	6313      	str	r3, [r2, #48]	; 0x30
 800305c:	4b3f      	ldr	r3, [pc, #252]	; (800315c <HAL_SPI_MspInit+0x150>)
 800305e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003068:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800306c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306e:	2302      	movs	r3, #2
 8003070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003076:	2303      	movs	r3, #3
 8003078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800307a:	2305      	movs	r3, #5
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800307e:	f107 0314 	add.w	r3, r7, #20
 8003082:	4619      	mov	r1, r3
 8003084:	4836      	ldr	r0, [pc, #216]	; (8003160 <HAL_SPI_MspInit+0x154>)
 8003086:	f7fd ff3b 	bl	8000f00 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800308a:	4b36      	ldr	r3, [pc, #216]	; (8003164 <HAL_SPI_MspInit+0x158>)
 800308c:	4a36      	ldr	r2, [pc, #216]	; (8003168 <HAL_SPI_MspInit+0x15c>)
 800308e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003090:	4b34      	ldr	r3, [pc, #208]	; (8003164 <HAL_SPI_MspInit+0x158>)
 8003092:	2200      	movs	r2, #0
 8003094:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003096:	4b33      	ldr	r3, [pc, #204]	; (8003164 <HAL_SPI_MspInit+0x158>)
 8003098:	2200      	movs	r2, #0
 800309a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800309c:	4b31      	ldr	r3, [pc, #196]	; (8003164 <HAL_SPI_MspInit+0x158>)
 800309e:	2200      	movs	r2, #0
 80030a0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030a2:	4b30      	ldr	r3, [pc, #192]	; (8003164 <HAL_SPI_MspInit+0x158>)
 80030a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030a8:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030aa:	4b2e      	ldr	r3, [pc, #184]	; (8003164 <HAL_SPI_MspInit+0x158>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030b0:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <HAL_SPI_MspInit+0x158>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80030b6:	4b2b      	ldr	r3, [pc, #172]	; (8003164 <HAL_SPI_MspInit+0x158>)
 80030b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030bc:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030be:	4b29      	ldr	r3, [pc, #164]	; (8003164 <HAL_SPI_MspInit+0x158>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030c4:	4b27      	ldr	r3, [pc, #156]	; (8003164 <HAL_SPI_MspInit+0x158>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80030ca:	4826      	ldr	r0, [pc, #152]	; (8003164 <HAL_SPI_MspInit+0x158>)
 80030cc:	f7fd fb80 	bl	80007d0 <HAL_DMA_Init>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80030d6:	f7ff ff57 	bl	8002f88 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a21      	ldr	r2, [pc, #132]	; (8003164 <HAL_SPI_MspInit+0x158>)
 80030de:	64da      	str	r2, [r3, #76]	; 0x4c
 80030e0:	4a20      	ldr	r2, [pc, #128]	; (8003164 <HAL_SPI_MspInit+0x158>)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80030e6:	4b21      	ldr	r3, [pc, #132]	; (800316c <HAL_SPI_MspInit+0x160>)
 80030e8:	4a21      	ldr	r2, [pc, #132]	; (8003170 <HAL_SPI_MspInit+0x164>)
 80030ea:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80030ec:	4b1f      	ldr	r3, [pc, #124]	; (800316c <HAL_SPI_MspInit+0x160>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030f2:	4b1e      	ldr	r3, [pc, #120]	; (800316c <HAL_SPI_MspInit+0x160>)
 80030f4:	2240      	movs	r2, #64	; 0x40
 80030f6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f8:	4b1c      	ldr	r3, [pc, #112]	; (800316c <HAL_SPI_MspInit+0x160>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030fe:	4b1b      	ldr	r3, [pc, #108]	; (800316c <HAL_SPI_MspInit+0x160>)
 8003100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003104:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003106:	4b19      	ldr	r3, [pc, #100]	; (800316c <HAL_SPI_MspInit+0x160>)
 8003108:	2200      	movs	r2, #0
 800310a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800310c:	4b17      	ldr	r3, [pc, #92]	; (800316c <HAL_SPI_MspInit+0x160>)
 800310e:	2200      	movs	r2, #0
 8003110:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003112:	4b16      	ldr	r3, [pc, #88]	; (800316c <HAL_SPI_MspInit+0x160>)
 8003114:	2200      	movs	r2, #0
 8003116:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003118:	4b14      	ldr	r3, [pc, #80]	; (800316c <HAL_SPI_MspInit+0x160>)
 800311a:	2200      	movs	r2, #0
 800311c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800311e:	4b13      	ldr	r3, [pc, #76]	; (800316c <HAL_SPI_MspInit+0x160>)
 8003120:	2200      	movs	r2, #0
 8003122:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003124:	4811      	ldr	r0, [pc, #68]	; (800316c <HAL_SPI_MspInit+0x160>)
 8003126:	f7fd fb53 	bl	80007d0 <HAL_DMA_Init>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8003130:	f7ff ff2a 	bl	8002f88 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a0d      	ldr	r2, [pc, #52]	; (800316c <HAL_SPI_MspInit+0x160>)
 8003138:	649a      	str	r2, [r3, #72]	; 0x48
 800313a:	4a0c      	ldr	r2, [pc, #48]	; (800316c <HAL_SPI_MspInit+0x160>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003140:	2200      	movs	r2, #0
 8003142:	2100      	movs	r1, #0
 8003144:	2024      	movs	r0, #36	; 0x24
 8003146:	f7fd fb0c 	bl	8000762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800314a:	2024      	movs	r0, #36	; 0x24
 800314c:	f7fd fb25 	bl	800079a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003150:	bf00      	nop
 8003152:	3728      	adds	r7, #40	; 0x28
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40003800 	.word	0x40003800
 800315c:	40023800 	.word	0x40023800
 8003160:	40020400 	.word	0x40020400
 8003164:	200000c4 	.word	0x200000c4
 8003168:	40026058 	.word	0x40026058
 800316c:	20000124 	.word	0x20000124
 8003170:	40026070 	.word	0x40026070

08003174 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0e      	ldr	r2, [pc, #56]	; (80031bc <HAL_TIM_Base_MspInit+0x48>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d115      	bne.n	80031b2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <HAL_TIM_Base_MspInit+0x4c>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	4a0c      	ldr	r2, [pc, #48]	; (80031c0 <HAL_TIM_Base_MspInit+0x4c>)
 8003190:	f043 0304 	orr.w	r3, r3, #4
 8003194:	6413      	str	r3, [r2, #64]	; 0x40
 8003196:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <HAL_TIM_Base_MspInit+0x4c>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2100      	movs	r1, #0
 80031a6:	201e      	movs	r0, #30
 80031a8:	f7fd fadb 	bl	8000762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80031ac:	201e      	movs	r0, #30
 80031ae:	f7fd faf4 	bl	800079a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80031b2:	bf00      	nop
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40000800 	.word	0x40000800
 80031c0:	40023800 	.word	0x40023800

080031c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031d2:	b480      	push	{r7}
 80031d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031d6:	e7fe      	b.n	80031d6 <HardFault_Handler+0x4>

080031d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031dc:	e7fe      	b.n	80031dc <MemManage_Handler+0x4>

080031de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031de:	b480      	push	{r7}
 80031e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031e2:	e7fe      	b.n	80031e2 <BusFault_Handler+0x4>

080031e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031e8:	e7fe      	b.n	80031e8 <UsageFault_Handler+0x4>

080031ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031ea:	b480      	push	{r7}
 80031ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031fc:	bf00      	nop
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003218:	f7fd f9a8 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800321c:	bf00      	nop
 800321e:	bd80      	pop	{r7, pc}

08003220 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003224:	2001      	movs	r0, #1
 8003226:	f7fe f81f 	bl	8001268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003234:	4802      	ldr	r0, [pc, #8]	; (8003240 <DMA1_Stream3_IRQHandler+0x10>)
 8003236:	f7fd fbfb 	bl	8000a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	200000c4 	.word	0x200000c4

08003244 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003248:	4802      	ldr	r0, [pc, #8]	; (8003254 <DMA1_Stream4_IRQHandler+0x10>)
 800324a:	f7fd fbf1 	bl	8000a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000124 	.word	0x20000124

08003258 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800325c:	4802      	ldr	r0, [pc, #8]	; (8003268 <TIM4_IRQHandler+0x10>)
 800325e:	f7ff f8e0 	bl	8002422 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000084 	.word	0x20000084

0800326c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003270:	4802      	ldr	r0, [pc, #8]	; (800327c <SPI2_IRQHandler+0x10>)
 8003272:	f7fe fd73 	bl	8001d5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	2000002c 	.word	0x2000002c

08003280 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003284:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <SystemInit+0x60>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	4a15      	ldr	r2, [pc, #84]	; (80032e0 <SystemInit+0x60>)
 800328c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003294:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <SystemInit+0x64>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a12      	ldr	r2, [pc, #72]	; (80032e4 <SystemInit+0x64>)
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80032a0:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <SystemInit+0x64>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80032a6:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <SystemInit+0x64>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a0e      	ldr	r2, [pc, #56]	; (80032e4 <SystemInit+0x64>)
 80032ac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80032b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80032b6:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <SystemInit+0x64>)
 80032b8:	4a0b      	ldr	r2, [pc, #44]	; (80032e8 <SystemInit+0x68>)
 80032ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80032bc:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <SystemInit+0x64>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a08      	ldr	r2, [pc, #32]	; (80032e4 <SystemInit+0x64>)
 80032c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <SystemInit+0x64>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032ce:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <SystemInit+0x60>)
 80032d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032d4:	609a      	str	r2, [r3, #8]
#endif
}
 80032d6:	bf00      	nop
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	e000ed00 	.word	0xe000ed00
 80032e4:	40023800 	.word	0x40023800
 80032e8:	24003010 	.word	0x24003010

080032ec <TIM4_Ini>:
*  Parameter(s)   :  
*  Return Value   :  
******************************************************************************/

void TIM4_Ini (void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 80032f0:	4803      	ldr	r0, [pc, #12]	; (8003300 <TIM4_Ini+0x14>)
 80032f2:	f7ff f872 	bl	80023da <HAL_TIM_Base_Start_IT>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80032f6:	201e      	movs	r0, #30
 80032f8:	f7fd fa4f 	bl	800079a <HAL_NVIC_EnableIRQ>
}
 80032fc:	bf00      	nop
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000084 	.word	0x20000084

08003304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800333c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003308:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800330a:	e003      	b.n	8003314 <LoopCopyDataInit>

0800330c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800330e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003310:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003312:	3104      	adds	r1, #4

08003314 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003314:	480b      	ldr	r0, [pc, #44]	; (8003344 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003316:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003318:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800331a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800331c:	d3f6      	bcc.n	800330c <CopyDataInit>
  ldr  r2, =_sbss
 800331e:	4a0b      	ldr	r2, [pc, #44]	; (800334c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003320:	e002      	b.n	8003328 <LoopFillZerobss>

08003322 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003322:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003324:	f842 3b04 	str.w	r3, [r2], #4

08003328 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003328:	4b09      	ldr	r3, [pc, #36]	; (8003350 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800332a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800332c:	d3f9      	bcc.n	8003322 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800332e:	f7ff ffa7 	bl	8003280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003332:	f000 f811 	bl	8003358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003336:	f7ff fbfc 	bl	8002b32 <main>
  bx  lr    
 800333a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800333c:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8003340:	080033f0 	.word	0x080033f0
  ldr  r0, =_sdata
 8003344:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003348:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800334c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003350:	20002a04 	.word	0x20002a04

08003354 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003354:	e7fe      	b.n	8003354 <ADC_IRQHandler>
	...

08003358 <__libc_init_array>:
 8003358:	b570      	push	{r4, r5, r6, lr}
 800335a:	4e0d      	ldr	r6, [pc, #52]	; (8003390 <__libc_init_array+0x38>)
 800335c:	4c0d      	ldr	r4, [pc, #52]	; (8003394 <__libc_init_array+0x3c>)
 800335e:	1ba4      	subs	r4, r4, r6
 8003360:	10a4      	asrs	r4, r4, #2
 8003362:	2500      	movs	r5, #0
 8003364:	42a5      	cmp	r5, r4
 8003366:	d109      	bne.n	800337c <__libc_init_array+0x24>
 8003368:	4e0b      	ldr	r6, [pc, #44]	; (8003398 <__libc_init_array+0x40>)
 800336a:	4c0c      	ldr	r4, [pc, #48]	; (800339c <__libc_init_array+0x44>)
 800336c:	f000 f820 	bl	80033b0 <_init>
 8003370:	1ba4      	subs	r4, r4, r6
 8003372:	10a4      	asrs	r4, r4, #2
 8003374:	2500      	movs	r5, #0
 8003376:	42a5      	cmp	r5, r4
 8003378:	d105      	bne.n	8003386 <__libc_init_array+0x2e>
 800337a:	bd70      	pop	{r4, r5, r6, pc}
 800337c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003380:	4798      	blx	r3
 8003382:	3501      	adds	r5, #1
 8003384:	e7ee      	b.n	8003364 <__libc_init_array+0xc>
 8003386:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800338a:	4798      	blx	r3
 800338c:	3501      	adds	r5, #1
 800338e:	e7f2      	b.n	8003376 <__libc_init_array+0x1e>
 8003390:	080033e8 	.word	0x080033e8
 8003394:	080033e8 	.word	0x080033e8
 8003398:	080033e8 	.word	0x080033e8
 800339c:	080033ec 	.word	0x080033ec

080033a0 <memset>:
 80033a0:	4402      	add	r2, r0
 80033a2:	4603      	mov	r3, r0
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d100      	bne.n	80033aa <memset+0xa>
 80033a8:	4770      	bx	lr
 80033aa:	f803 1b01 	strb.w	r1, [r3], #1
 80033ae:	e7f9      	b.n	80033a4 <memset+0x4>

080033b0 <_init>:
 80033b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b2:	bf00      	nop
 80033b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b6:	bc08      	pop	{r3}
 80033b8:	469e      	mov	lr, r3
 80033ba:	4770      	bx	lr

080033bc <_fini>:
 80033bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033be:	bf00      	nop
 80033c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033c2:	bc08      	pop	{r3}
 80033c4:	469e      	mov	lr, r3
 80033c6:	4770      	bx	lr
